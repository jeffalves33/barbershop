<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Barbershop</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<style>
    .days {
        grid-template-columns: repeat(7, 1fr);
    }

    .dates {
        grid-template-columns: repeat(7, 1fr);
    }

    .date {
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 10px;
        margin: auto;
        cursor: pointer;
        font-weight: 600;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        transition: 0.2s;
    }

    .date:hover {
        background: #ff5869;
        color: #fff;
    }

    .date.active {
        background: #ff5869;
        color: #fff;
    }

    .date.inactive {
        color: #d2d2d2;
    }
</style>

<body>
    <div class="container-fluid">
        <!-- Header -->
        <h3 class="text-center mt-4 mb-3">Selecione um horário</h3>

        <div class="d-flex flex-column p-2 border-bottom py-3">
            <div class="d-flex justify-content-between align-items-center p-2">
                <button class="d-flex align-items-center justify-content-center border-0 bg-transparent" id="prevBtn">
                    <i class="fa-solid fa-chevron-left">←</i>
                </button>
                <div class="text-center" id="monthYear"></div>
                <button class="d-flex align-items-center justify-content-center border-0 bg-transparent" id="nextBtn">
                    <i class="fa-solid fa-chevron-right">→</i>
                </button>
            </div>
            <div class="days d-grid">
                <div class="text-center p-2">Seg</div>
                <div class="text-center p-2">Ter</div>
                <div class="text-center p-2">Qua</div>
                <div class="text-center p-2">Qui</div>
                <div class="text-center p-2">Sex</div>
                <div class="text-center p-2">Sab</div>
                <div class="text-center p-2">Dom</div>
            </div>
            <div class="gap-3 d-flex" id="dates"></div>

        </div>

        <div class="w-100 border-bottom d-flex flex-column align-items-center py-3">
            <p class="text-center mb-3">Horários disponíveis</p>
            <div class="btn-group gap-2 rounded-circle" role="group" id="horarios">
                <!-- Os horários serão inseridos aqui dinamicamente -->
            </div>
        </div>

        <div class="w-100 d-flex justify-content-center my-4">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop"
                onclick="resumoAgendamento()">Finalizar agendamento
            </button>
            <!-- Modal -->
            <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
                aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">Resumo</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body p-0">
                            <ul class="list-group" id="listBuy">
                            </ul>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Editar</button>
                            <button type="button" class="btn btn-primary">Finalizar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script>
        const monthYearElement = document.getElementById('monthYear');
        const datesElement = document.getElementById('dates');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const horariosContainer = document.getElementById('horarios-container');

        let currentDate = new Date();
        let selectedDate = new Date();

        const updateCalendar = () => {
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth();

            // Define o mês e ano no topo do calendário
            const monthYearString = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });
            monthYearElement.textContent = monthYearString;

            let datesHTML = '';

            // Obtém o primeiro dia da semana da data atual
            const startOfWeek = new Date(currentDate);
            startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1); // Ajusta para começar na segunda-feira

            // Preenche 7 dias da semana
            for (let i = 0; i < 7; i++) {
                const date = new Date(startOfWeek);
                date.setDate(startOfWeek.getDate() + i);

                const isPastDate = date < new Date(new Date().setHours(0, 0, 0, 0)); // Compara com o início do dia atual
                const activeClass = date.toDateString() === selectedDate.toDateString() ? 'active' : '';
                const inactiveClass = date.getMonth() !== currentMonth ? 'inactive' : '';
                const disabledClass = isPastDate ? 'disabled' : '';

                datesHTML += `<div class="date ${activeClass} ${inactiveClass} ${disabledClass}" data-date="${date}">${date.getDate()}</div>`;
            }

            datesElement.innerHTML = datesHTML;

            document.querySelectorAll('.date').forEach(dateElement => {
                if (!dateElement.classList.contains('disabled')) {
                    dateElement.addEventListener('click', (e) => {
                        selectedDate = new Date(e.target.getAttribute('data-date'));
                        updateCalendar();

                        // Formata a data para o formato que seu backend espera (YYYY-MM-DD)
                        const formattedDate = selectedDate.toISOString().split('T')[0];

                        // Faz a requisição AJAX para buscar os horários disponíveis
                        fetch('/horarios', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ date: formattedDate })
                        })
                            .then(response => response.json())
                            .then(data => {
                                updateAvailableTimes(data); // Função para atualizar os horários na interface
                            })
                            .catch(error => console.error('Error:', error));
                    });
                }
            });
        };

        prevBtn.addEventListener('click', () => {
            // Subtrai 7 dias da data atual para voltar uma semana
            currentDate.setDate(currentDate.getDate() - 7);
            updateCalendar();
        });

        nextBtn.addEventListener('click', () => {
            // Adiciona 7 dias à data atual para avançar uma semana
            currentDate.setDate(currentDate.getDate() + 7);
            updateCalendar();
        });

        const updateAvailableTimes = (horarios) => {
            // Limpa os horários antigos
            horariosContainer.innerHTML = '';

            // Adiciona os novos horários
            horarios.forEach(horario => {
                const input = document.createElement('input');
                input.type = 'radio';
                input.className = 'btn-check';
                input.name = 'btnradio';
                input.id = `btnradio${horario.id}`;
                input.autocomplete = 'off';

                const label = document.createElement('label');
                label.className = 'btn btn-outline-primary';
                label.htmlFor = `btnradio${horario.id}`;
                label.textContent = horario.hora;
                label.addEventListener('click', () => localStorage.setItem('selectedTime', JSON.stringify(horario.hora)));

                horariosContainer.appendChild(input);
                horariosContainer.appendChild(label);
            });
        };

        updateCalendar();

        function resumoAgendamento() {
            // Obtendo os dados do localStorage
            const selectedServices = JSON.parse(localStorage.getItem("selectedServices")); //serviços selecionados
            const valuesFromSelectedServices = JSON.parse(localStorage.getItem("valuesFromSelectedServices")); //valores dos serviços
            const selectedTime = JSON.parse(localStorage.getItem('selectedTime')); //horário selecionado
            const dateString = new Date(document.querySelector('.date.active').getAttribute('data-date')); //data selecionada

            // Formatando a data selecionada
            const selectedDay = `${dateString.getDate()} de ${dateString.toLocaleString('pt-BR', { month: 'long' })}, ${dateString.toLocaleString('pt-BR', { weekday: 'long' })}`;

            // Calculando o valor total dos serviços
            const totalValue = valuesFromSelectedServices.reduce((acc, val) => acc + val, 0).toFixed(2).replace('.', ',');

            // Construindo o HTML dinâmico
            let elementHtml = `
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                        <h6 class="mb-1">Serviços</h6>
            `;
            selectedServices.forEach(service => {
                elementHtml += `<p class="text-muted mb-0 text-body-secondary">${service}</p>`;
            });
            elementHtml += `
                    </div>
                    <span class="text-muted">R$ ${totalValue}</span>
                </li>
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                        <h6 class="mb-1">Data e Horário</h6>
                        <p class="text-muted mb-0 text-body-secondary">${selectedDay}</p>
                    </div>
                    <span class="text-muted">${selectedTime}</span>
                </li>
            `;

            // Inserindo o HTML no modal
            const bodyModal = document.getElementById("listBuy");
            bodyModal.innerHTML = elementHtml;
        }

        // Função para buscar os horários disponíveis e exibi-los
        async function carregarHorarios() {
            try {
                const response = await fetch('/horarios-disponiveis');
                const horarios = await response.json();

                // Exibir os horários
                const horariosDiv = document.getElementById('horarios');
                horarios.forEach(horario => {
                    let horarioItem = document.createElement('button');
                    horarioItem.innerText = horario;
                    horarioItem.onclick = () => agendarHorario(horario);
                    horariosDiv.appendChild(horarioItem);
                });
            } catch (error) {
                console.error('Erro ao carregar horários:', error);
            }
        }

        // Carregar os horários quando a página carregar
        window.onload = carregarHorarios;
    </script>
</body>

</html>